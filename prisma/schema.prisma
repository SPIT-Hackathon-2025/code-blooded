// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())  
  username      String    
  email         String    
  password      String
  phone         String    
  otp           String?
  otpExpiration DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  teams         UserTeam[]
  commits       Commit[] 
}

model Team {
  id        String     @id @default(uuid())  
  name      String     @unique
  users     UserTeam[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  documents CodeDocument[]
}

model UserTeam {
  id     String @id @default(uuid())  
  userId String 
  teamId String 
  role   Role   @default(VIEWER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum Role {
  EDITOR
  VIEWER
  ADMIN
}

model CodeDocument {
  id          String   @id @default(uuid())  
  name        String   @unique
  teamId      String   // This is the foreign key linking to the Team
  content     String 
  language    String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  commits     Commit[] // One CodeDocument can have many commits
}

model Commit {
  id            String     @id @default(uuid())    // Unique ID for the commit
  message       String     // Commit message       
  authorId      String     // Foreign key to User who made the commit
  author        User       @relation(fields: [authorId], references: [id]) // Relation to User
  documentId    String     // Foreign key to the CodeDocument that was changed
  document      CodeDocument @relation(fields: [documentId], references: [id]) // Relation to CodeDocument
  content       String     // Content of the document at the time of this commit
  changes       String     // Details about what changed in this commit (e.g., file paths or diffs)
  createdAt     DateTime   @default(now())         // Timestamp when the commit is created
  updatedAt     DateTime   @updatedAt              // Timestamp when the commit is updated
}

// model Commit {
//   id            String     @id @default(uuid())    // Unique ID for the commit
//   message       String     // Commit message       
//   authorId      String     // Foreign key to User who made the commit
//   author        User       @relation(fields: [authorId], references: [id]) // Relation to User
//   documentId    String     // Foreign key to the CodeDocument that was changed
//   document      CodeDocument @relation(fields: [documentId], references: [id]) // Relation to CodeDocument
//   documentContent String  // Storing only the content of the document
//   changes       String     // Details about what changed in this commit (e.g., file paths or diffs)
//   createdAt     DateTime   @default(now())         // Timestamp when the commit is created
//   updatedAt     DateTime   @updatedAt              // Timestamp when the commit is updated
// }
// model User {
//   id            String     @id @default(auto()) @map("_id") @db.ObjectId
//   username      String
//   email         String    
//   password      String
//   phone         String
//   otp           String?
//   otpExpiration DateTime?
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt
//   teams         UserTeam[]
// }
// //elecktron
// //gitt on before closing autocommits 
// model Team {
//   id        String     @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   users     UserTeam[]
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
// }

// model UserTeam {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @db.ObjectId
//   teamId String @db.ObjectId
//   role   Role   @default(VIEWER)

//   user User @relation(fields: [userId], references: [id])
//   team Team @relation(fields: [teamId], references: [id])
// }

// enum Role {
//   EDITOR
//   VIEWER
// }

// model CodeDocument {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   roomId    String   @unique 
//   content   String 
//   language  String 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
